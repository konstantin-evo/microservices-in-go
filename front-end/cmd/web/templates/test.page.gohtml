{{template "base" .}}

{{define "content" }}
    <div class="container">
        <div class="row">
            <div class="col">
                <h1 class="mt-5">Test microservices</h1>
                <hr>
                <div class="row">
                    <div class="col-md-6">
                        <a id="brokerBtn" class="btn btn-outline-secondary" href="javascript:void(0);">Test Broker</a>
                        <a id="authBrokerBtn" class="btn btn-outline-secondary" href="javascript:void(0);">Test Auth</a>
                        <a id="logBtn" class="btn btn-outline-secondary" href="javascript:void(0);">Test Log</a>
                        <a id="mailBtn" class="btn btn-outline-secondary" href="javascript:void(0);">Test Email</a>
                        <a id="grpcLogBtn" class="btn btn-outline-secondary" href="javascript:void(0);">Test GRPC
                            Log</a>
                    </div>
                    <div class="col-md-3">
                        <input type="email" id="email" class="form-control" placeholder="Email"
                               value="admin@example.com">
                    </div>
                    <div class="col-md-3">
                        <input type="password" id="password" class="form-control" placeholder="Password"
                               value="verysecret">
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col">
                <h4 class="mt-5">Logs</h4>
                <div class="mt-1"
                     style="outline: 1px solid silver; padding: 2em; max-height: 10em; overflow-y: scroll;">
                    <pre id="output"><span class="text-muted">Output shows here...</span></pre>
                </div>
            </div>
        </div>
        <div class="row align-items-stretch">
            <div class="col d-flex flex-column">
                <h4 class="mt-5">Sent</h4>
                <div class="mt-1 flex-fill" style="outline: 1px solid silver; padding: 2em;">
                    <pre id="payload"><span class="text-muted">Nothing sent yet...</span></pre>
                </div>
            </div>
            <div class="col d-flex flex-column">
                <h4 class="mt-5">Received</h4>
                <div class="mt-1 flex-fill" style="outline: 1px solid silver; padding: 2em;">
                    <pre id="received"><span class="text-muted">Nothing received yet...</span></pre>
                </div>
            </div>
        </div>
    </div>
{{end}}

{{define "js"}}
    <script>
        const brokerBtn = document.getElementById("brokerBtn");
        const authBtn = document.getElementById("authBrokerBtn");
        const logBtn = document.getElementById("logBtn");
        const mailBtn = document.getElementById("mailBtn");
        const grpcBtn = document.getElementById("grpcLogBtn");
        const output = document.getElementById("output");
        const sent = document.getElementById("payload");
        const received = document.getElementById("received");

        const handleMailBtnClick = () => {
            const email = document.getElementById("email").value;

            const payload = {
                action: "mail",
                mail: {
                    from: "me@example.com",
                    to: email,
                    subject: "Test email",
                    message: "Hello world!",
                }
            }

            const headers = new Headers();
            headers.append("Content-Type", "application/json");

            const body = {
                method: 'POST',
                body: JSON.stringify(payload),
                headers: headers,
            }

            fetch("http:\/\/localhost:8080/handle", body)
                .then((response) => response.json())
                .then((data) => {
                    sent.innerHTML = JSON.stringify(payload, undefined, 4);
                    received.innerHTML = JSON.stringify(data, undefined, 4);
                    if (data.error) {
                        output.innerHTML += `<br><strong>Error:</strong> ${data.message}`;
                    } else {
                        output.innerHTML += `<br><strong>Response from broker service</strong>: ${data.message}`;
                    }
                })
                .catch((error) => {
                    output.innerHTML += "<br><br>Eror: " + error;
                })
        }

        const handleLogBtnClick = () => {
            const payload = {
                action: "log",
                log: {
                    name: "event",
                    data: "Some kind of data",
                }
            }

            sent.innerHTML = JSON.stringify(payload, undefined, 4);
            sendRequest(payload, (data) => {
                received.innerHTML = JSON.stringify(data, undefined, 4);
                if (data.error) {
                    output.innerHTML += `<br><strong>Error:</strong> ${data.message}`;
                } else {
                    output.innerHTML += `<br><strong>Response from broker service</strong>: ${data.message}`;
                }
            });
        }

        const handleLogGrpcBtnClick = () => {
            const payload = {
                action: "logGrpc",
                log: {
                    name: "gRPC event",
                    data: "Some kind of data",
                }
            }

            sent.innerHTML = JSON.stringify(payload, undefined, 4);
            sendRequest(payload, (data) => {
                received.innerHTML = JSON.stringify(data, undefined, 4);
                if (data.error) {
                    output.innerHTML += `<br><strong>Error:</strong> ${data.message}`;
                } else {
                    output.innerHTML += `<br><strong>Response from broker service</strong>: ${data.message}`;
                }
            });
        }

        const handleAuthBtnClick = () => {
            const email = document.getElementById("email").value;
            const password = document.getElementById("password").value;

            const payload = {
                action: "auth",
                auth: {
                    email: email,
                    password: password,
                }
            }
            sent.innerHTML = JSON.stringify(payload, undefined, 4);
            sendRequest(payload, (data) => {
                received.innerHTML = JSON.stringify(data, undefined, 4);
                if (data.error) {
                    output.innerHTML += `<br><strong>Error:</strong> ${data.message}`;
                } else {
                    output.innerHTML += `<br><strong>Response from broker service</strong>: ${data.message}`;
                }
            });
        }

        const handleBrokerBtnClick = () => {
            const payload = {
                action: "ping",
            }
            sent.innerHTML = JSON.stringify(payload, undefined, 4);
            sendRequest(payload, (data) => {
                received.innerHTML = JSON.stringify(data, undefined, 4);
                if (data.error) {
                    output.innerHTML += `<br><strong>Error:</strong> ${data.message}`;
                } else {
                    output.innerHTML += `<br><strong>Response from broker service</strong>: ${data.message}`;
                }
            });
        }

        const sendRequest = (payload, onSuccess) => {
            const headers = new Headers();
            headers.append("Content-Type", "application/json");

            const body = {
                method: "POST",
                body: JSON.stringify(payload),
                headers: headers,
            }

            fetch("http:\/\/localhost:8080/handle", body)
                .then((response) => response.json())
                .then(onSuccess)
                .catch((error) => {
                    output.innerHTML += "<br><br>Error: " + error;
                })
        }

        logBtn.addEventListener("click", handleLogBtnClick);
        grpcBtn.addEventListener("click", handleLogGrpcBtnClick)
        authBtn.addEventListener("click", handleAuthBtnClick);
        brokerBtn.addEventListener("click", handleBrokerBtnClick);
        mailBtn.addEventListener("click", handleMailBtnClick)

    </script>
{{end}}
